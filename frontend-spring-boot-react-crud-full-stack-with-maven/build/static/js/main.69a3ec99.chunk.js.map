{"version":3,"sources":["service/CourseDataService.js","component/ListCoursesComponent.jsx","component/CourseComponent.jsx","service/UserDataService.js","component/UserComponent.jsx","component/ListUsersComponent.jsx","component/AddUserComponent.jsx","service/AuthenticationService.js","component/LoginComponent.jsx","component/LogoutComponent.jsx","component/MenuComponent.jsx","component/AuthenticatedRoute.jsx","component/InstructorApp.jsx","App.js","serviceWorker.js","index.js"],"names":["COURSE_API_URL","service_CourseDataService","axios","get","concat","id","delete","course","put","post","idUser","ListCoursesComponent","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","courses","message","deleteCourseClicked","bind","assertThisInitialized","updateCourseClicked","addCourseClicked","refreshCourses","_this2","CourseDataService","retrieveAllCourses","then","response","setState","data","_this3","console","log","deleteCourse","history","push","_this4","react_default","a","createElement","className","map","key","href","onClick","modifyUsersClicked","description","Component","CourseComponent","match","params","onSubmit","validate","retrieveCourse","values","errors","length","targetDate","createCourse","updateCourse","_this$state","formik_esm","initialValues","validateOnChange","validateOnBlur","enableReinitialize","name","component","type","disabled","service_UserDataService","user","UserComponent","nome","endereco","email","telefone","password","papeis","UserDataService","retrieveUser","role","value","createUser","updateUser","roles","label","handleChange","e","react_select_browser_esm","options","find","obj","onChange","ListUsersComponent","users","deleteUserClicked","updateUserClicked","addUserClicked","refreshUsers","retrieveAllUsers","deleteUser","AddUserComponent","usersNotOnCourse","retrieveUsersNotOnCourse","addUser","_this5","service_AuthenticationService","username","headers","authorization","createBasicAuthToken","window","btoa","sessionStorage","setItem","setupAxiosInterceptors","token","createJWTToken","removeItem","getItem","interceptors","request","use","config","isUserLoggedIn","LoginComponent","hasLoginFailed","showSuccessMessage","loginClicked","event","defineProperty","target","AuthenticationService","executeJwtAuthenticationService","registerSuccessfulLoginForJwt","catch","LogoutComponent","Fragment","MenuComponent","style","color","react_router_dom","to","logout","withRouter","AuthenticatedRoute","react_router","InstructorApp","component_MenuComponent","width","margin","padding","path","exact","component_AuthenticatedRoute","App","maxWidth","component_InstructorApp","Boolean","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.69a3ec99.chunk.js","sourcesContent":["import axios from 'axios'\n\n//const INSTRUCTOR = 'in28minutes'\nconst COURSE_API_URL = 'http://localhost:8080'\n//const INSTRUCTOR_API_URL = `${COURSE_API_URL}/instructors/${INSTRUCTOR}`\n\nclass CourseDataService {\n\n    retrieveAllCourses() {\n        //console.log('executed service')\n        return axios.get(`${COURSE_API_URL}/courses`);\n    }\n\n    retrieveCourse(id) {\n        //console.log('executed service')\n        return axios.get(`${COURSE_API_URL}/courses/${id}`);\n    }\n\n    deleteCourse(id) {\n        //console.log('executed service')\n        return axios.delete(`${COURSE_API_URL}/courses/${id}`);\n    }\n\n    updateCourse( id, course) {\n        //console.log('executed service')\n        return axios.put(`${COURSE_API_URL}/courses/${id}`, course);\n    }\n\n    createCourse(course) {\n        //console.log('executed service')\n        return axios.post(`${COURSE_API_URL}/courses`, course);\n    }\n\n    retrieveAllUsers(id) {\n        //console.log('executed service')\n        return axios.get(`${COURSE_API_URL}/courses/${id}/addUser`);\n    }\n\n    retrieveUsersNotOnCourse(id) {\n        //console.log('executed service')\n        return axios.get(`${COURSE_API_URL}/courses/${id}/getUsers`);\n    }\n\n    addUser(id, idUser) {\n        //console.log('executed service')\n        return axios.put(`${COURSE_API_URL}/courses/${id}/addUser/${idUser}`);\n    }\n    \n    deleteUser(id, idUser) {\n        //console.log('executed service')\n        return axios.delete(`${COURSE_API_URL}/courses/${id}/addUser/${idUser}`);\n    }\n}\n\n\n\nexport default new CourseDataService()","import React, { Component } from 'react'\nimport CourseDataService from '../service/CourseDataService';\n\n//const INSTRUCTOR = 'in28minutes'\n\nclass ListCoursesComponent extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            courses: [],\n            message: null\n        }\n        this.deleteCourseClicked = this.deleteCourseClicked.bind(this)\n        this.updateCourseClicked = this.updateCourseClicked.bind(this)\n        this.addCourseClicked = this.addCourseClicked.bind(this)\n        this.refreshCourses = this.refreshCourses.bind(this)\n    }\n    \n    componentDidMount() {\n        this.refreshCourses();\n    }\n\n    refreshCourses() {\n                CourseDataService.retrieveAllCourses()\n                .then(\n                    response => {\n                        //console.log(response);\n                        this.setState({ courses: response.data })\n                    }\n                )\n    }\n\n    deleteCourseClicked(id) {\n        console.log(id);\n        CourseDataService.deleteCourse(id)\n            .then(\n                response => {\n                    this.setState({ message: `Delete of course ${id} Successful` })\n                    this.refreshCourses()\n                }\n            )\n\n    }\n\n    modifyUsersClicked(id) {\n\n        this.props.history.push(`/courses/${id}/addUser`)\n            \n    }\n\n    addCourseClicked() {\n        this.props.history.push(`/courses/-1`)\n    }\n\n    updateCourseClicked(id) {\n        //console.log('update ' + id)\n        this.props.history.push(`/courses/${id}`)\n    }\n\n    render() {\n       \n        //console.log('render')\n\n        return (\n            <div className=\"container\">\n                <h3>All Courses</h3>\n                {this.state.message && <div className=\"alert alert-success\">{this.state.message}</div>}\n                <div className=\"container\">\n                    <table className=\"table\">\n                        <thead>\n                            <tr>\n                                <th>Id</th>\n                                <th>Description</th>\n                                <th>Update</th>\n                                <th>Delete</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                this.state.courses.map(\n                                    course =>\n                                        <tr key={course.id}>\n                                            {/* eslint-disable-next-line*/}\n                                            <td><a href=\"\" onClick={() => this.modifyUsersClicked(course.id)}>{course.id}</a></td>\n                                            {/* eslint-disable-next-line*/}\n                                            <td><a href=\"\" onClick={() => this.modifyUsersClicked(course.id)}>{course.description}</a></td>\n                                            <td><button className=\"btn btn-success\" onClick={() => this.updateCourseClicked(course.id)}>Update</button></td>\n                                            <td><button className=\"btn btn-warning\" onClick={() => this.deleteCourseClicked(course.id)}>Delete</button></td>\n                                        </tr>\n                                )\n                            }\n                        </tbody>\n                    </table>\n                    <div className=\"row\">\n                        <button className=\"btn btn-success\" onClick={this.addCourseClicked}>Add</button>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default ListCoursesComponent","import React, { Component } from 'react'\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport CourseDataService from '../service/CourseDataService';\n\nclass CourseComponent extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            id: this.props.match.params.id,\n            description: ''\n        }\n\n        this.onSubmit = this.onSubmit.bind(this)\n        this.validate = this.validate.bind(this)\n\n    }\n\n    componentDidMount() {\n\n        // eslint-disable-next-line\n        if (this.state.id == -1) {\n            return\n        }\n\n        CourseDataService.retrieveCourse(this.state.id)\n            .then(response => this.setState({\n                description: response.data.description\n            }))\n    }\n\n    validate(values) {\n        let errors = {}\n        if (!values.description) {\n            errors.description = 'Enter a Description'\n        } else if (values.description.length < 5) {\n            errors.description = 'Enter atleast 5 Characters in Description'\n        }\n\n        return errors\n\n    }\n\n    onSubmit(values) {\n        //let username = INSTRUCTOR\n\n        let course = {\n            id: this.state.id,\n            description: values.description,\n            targetDate: values.targetDate\n        }\n\n        // eslint-disable-next-line\n        if (this.state.id == -1) {\n            CourseDataService.createCourse(course)\n                .then(() => this.props.history.push('/courses'))\n        } else {\n            CourseDataService.updateCourse(this.state.id, course)\n                .then(() => this.props.history.push('/courses'))\n        }\n\n    }\n\n    render() {\n\n        let { description, id } = this.state\n\n        return (\n            <div>\n                <h3>Course</h3>\n                <div className=\"container\">\n                    <Formik\n                        initialValues={{ id, description }}\n                        onSubmit={this.onSubmit}\n                        validateOnChange={false}\n                        validateOnBlur={false}\n                        validate={this.validate}\n                        enableReinitialize={true}\n                    >\n                        {\n                            (props) => (\n                                <Form>\n                                    <ErrorMessage name=\"description\" component=\"div\"\n                                        className=\"alert alert-warning\" />\n                                    <fieldset className=\"form-group\">\n                                        <label>Id</label>\n                                        <Field className=\"form-control\" type=\"text\" name=\"id\" disabled />\n                                    </fieldset>\n                                    <fieldset className=\"form-group\">\n                                        <label>Description</label>\n                                        <Field className=\"form-control\" type=\"text\" name=\"description\" />\n                                    </fieldset>\n                                    <button className=\"btn btn-success\" type=\"submit\">Save</button>\n                                </Form>\n                            )\n                        }\n                    </Formik>\n\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default CourseComponent","import axios from 'axios'\n\n//const INSTRUCTOR = 'in28minutes'\nconst COURSE_API_URL = 'http://localhost:8080'\n//const INSTRUCTOR_API_URL = `${COURSE_API_URL}/instructors/${INSTRUCTOR}`\n\nclass UserDataService {\n\n    retrieveAllUsers() {\n        //console.log('executed service')\n        return axios.get(`${COURSE_API_URL}/users`);\n    }\n\n    retrieveUser(id) {\n        //console.log('executed service')\n        return axios.get(`${COURSE_API_URL}/users/${id}`);\n    }\n\n    deleteUser(id) {\n        //console.log('executed service')\n        return axios.delete(`${COURSE_API_URL}/users/${id}`);\n    }\n\n    updateUser(id, user) {\n        //console.log('executed service')\n        return axios.put(`${COURSE_API_URL}/users/${id}`, user);\n    }\n\n    createUser(user) {\n        //console.log('executed service')\n        return axios.post(`${COURSE_API_URL}/user`, user);\n    }\n}\n\nexport default new UserDataService()","import React, { Component} from 'react'\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport UserDataService from '../service/UserDataService';\nimport Select from 'react-select'\n//import PhoneInput from 'react-phone-number-input'\n\n//const INSTRUCTOR = 'in28minutes'\n\nclass UserComponent extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            id: this.props.match.params.id,\n            nome: '',\n            endereco: '',\n            email: '',\n            telefone: '',\n            password:'',\n            papeis: []\n        }\n        this.onSubmit = this.onSubmit.bind(this)\n        this.validate = this.validate.bind(this)\n       // this.handleChange = this.handleChange.bind(this);\n    }\n\n    componentDidMount() {\n\n        // eslint-disable-next-line\n        if (this.state.id == -1) {\n            return\n        }\n\n        UserDataService.retrieveUser(this.state.id)\n            .then(response => this.setState({\n                nome: response.data.nome,\n                endereco: response.data.endereco,\n                email: response.data.email,\n                telefone: response.data.telefone,\n                password: response.data.password\n            }))\n    }\n\n    validate(values) {\n        let errors = {}\n        if (!values.nome) {\n            errors.nome = 'Enter a name'\n        }\n        if (!values.endereco) {\n            errors.endereco = 'Enter a address'\n        }\n        if (!values.email) {\n            errors.email = 'Enter a email'\n        }\n        if (!values.telefone) {\n            errors.telefone = 'Enter a phone number'\n        }\n        if (!values.password) {\n            errors.password = 'Enter a email'\n        }\n\n        return errors\n\n    } \n    /*\n    handleChange(event) {\n        this.setState({papeis: event.target.papeis});\n    }*/\n\n    onSubmit(values) {\n        //console.log(papeis);\n        \n        let user = {\n            id: this.state.id,\n            nome: values.nome,\n            endereco : values.endereco,\n            email: values.email,\n            telefone: values.telefone,\n            password: values.password,\n            papeis:[],\n            targetDate: values.targetDate\n        }\n        \n        user.papeis.push(this.role.value);\n        console.log(user.papeis);\n        // eslint-disable-next-line\n        if (this.state.id == -1) {\n            UserDataService.createUser(user)\n                .then(() => this.props.history.push('/users'))\n        } else {\n            UserDataService.updateUser(this.state.id, user)\n                .then(() => this.props.history.push('/users'))\n        }\n\n    }\n    \n    render() {\n        const roles = [{ value: 'ADMIN', label: 'Administrador'}, {value: \"ESTUDANTE\", label: \"Estudante\"}] \n        //const [selectedValue, setSelectedValue] = roles;\n        var handleChange = e => {\n            this.role=e;\n            console.log(this.role);\n            //setSelectedValue(e.value);\n            return e.value;\n          }\n          \n        let { id, nome, endereco, email, telefone, password, papeis } = this.state\n\n        return (\n            <div>\n                <h3>User</h3>\n                <div className=\"container\">\n                    <Formik\n                        initialValues={{ id, nome, endereco, email, telefone, password, papeis }}\n                        onSubmit={this.onSubmit}\n                        validateOnChange={false}\n                        validateOnBlur={false}\n                        validate={this.validate}\n                        enableReinitialize={true}\n                    >\n                        {\n                            (props) => (\n                                <Form>\n                                    <ErrorMessage name=\"description\" component=\"div\" className=\"alert alert-warning\" />\n                                    <fieldset className=\"form-group\">\n                                        <label>Id</label>\n                                        <Field className=\"form-control\" type=\"text\" name=\"id\" disabled />\n                                    </fieldset>\n                                    <fieldset className=\"form-group\">\n                                        <label>Name</label>\n                                        <Field className=\"form-control\" type=\"text\" name=\"nome\" />\n                                    </fieldset>\n                                    <fieldset className=\"form-group\">\n                                        <label>Password</label>\n                                        <Field className=\"form-control\" type=\"text\" name=\"password\" />\n                                    </fieldset>\n                                    <fieldset className=\"form-group\">\n                                        <label>Role</label>\n                                        <Select options={roles} \n                                            value={roles.find(obj => obj.value)} // set selected value// set list of the data\n                                            onChange={handleChange}/>\n                                    </fieldset>\n                                    <fieldset className=\"form-group\">\n                                        <label>Address</label>\n                                        <Field className=\"form-control\" type=\"text\" name=\"endereco\" />\n                                    </fieldset>\n                                    <fieldset className=\"form-group\">\n                                        <label>Email</label>\n                                        <Field className=\"form-control\" type=\"email\" name=\"email\" />\n                                    </fieldset>\n                                    <fieldset className=\"form-group\">\n                                        <label>Phone Number</label>\n                                        <Field className=\"form-control\" type=\"tel\" name=\"telefone\" />\n                                    </fieldset>\n                                    <button className=\"btn btn-success\" type=\"submit\">Save</button>\n                                </Form>\n                            )\n                        }\n                    </Formik>\n\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default UserComponent","import React, { Component } from 'react'\nimport UserDataService from '../service/UserDataService';\n\nclass ListUsersComponent extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            users: [],\n            message: null\n        }\n        this.deleteUserClicked = this.deleteUserClicked.bind(this)\n        this.updateUserClicked = this.updateUserClicked.bind(this)\n        this.addUserClicked = this.addUserClicked.bind(this)\n        this.refreshUsers = this.refreshUsers.bind(this)\n    }\n\n    componentDidMount() {\n        this.refreshUsers();\n    }\n\n    refreshUsers() {\n        UserDataService.retrieveAllUsers()\n            .then(\n                response => {\n                    this.setState({ users: response.data })\n                }\n            )\n    }\n\n    deleteUserClicked(id) {\n        UserDataService.deleteUser(id)\n            .then(\n                response => {\n                    this.setState({ message: `Delete of user ${id} Successful` })\n                    this.refreshUsers()\n                }\n            )\n\n    }\n\n    addUserClicked() {\n        this.props.history.push(`/users/-1`)\n    }\n\n    updateUserClicked(id) {\n        this.props.history.push(`/users/${id}`)\n    }\n\n    render() {\n        //console.log('render')\n\n        return (\n            <div className=\"container\">\n                <h3>All Users</h3>\n                {this.state.message && <div className=\"alert alert-success\">{this.state.message}</div>}\n                <div className=\"container\">\n                    <table className=\"table\">\n                        <thead>\n                            <tr>\n                                <th>Id</th>\n                                <th>Nome</th>\n                                <th>Update</th>\n                                <th>Delete</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                this.state.users.map(\n                                    user =>\n                                        <tr key={user.id}>\n                                            <td>{user.id}</td>\n                                            <td>{user.nome}</td>\n                                            <td><button className=\"btn btn-success\" onClick={() => this.updateUserClicked(user.id)}>Update</button></td>\n                                            <td><button className=\"btn btn-warning\" onClick={() => this.deleteUserClicked(user.id)}>Delete</button></td>\n                                        </tr>\n                                )\n                            }\n                        </tbody>\n                    </table>\n                    <div className=\"row\">\n                        <button className=\"btn btn-success\" onClick={this.addUserClicked}>Add</button>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default ListUsersComponent","import React, { Component } from 'react'\nimport CourseDataService from '../service/CourseDataService';\n\nclass AddUserComponent extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            users: [],\n            usersNotOnCourse: [],\n            message: null\n        }\n        this.deleteUserClicked = this.deleteUserClicked.bind(this)\n        this.addUserClicked = this.addUserClicked.bind(this)\n        this.refreshUsers = this.refreshUsers.bind(this)\n    }\n\n    componentDidMount() {\n        this.refreshUsers();\n    }\n\n    refreshUsers() {\n        CourseDataService.retrieveAllUsers(this.props.match.params.id)\n            .then(\n                response => {\n                    this.setState({ users: response.data })\n                }\n            )\n\n        CourseDataService.retrieveUsersNotOnCourse(this.props.match.params.id)\n            .then(\n                response => {\n                    this.setState({ usersNotOnCourse: response.data })\n                }\n            )\n    }\n\n    deleteUserClicked(idUser) {\n        CourseDataService.deleteUser(this.props.match.params.id, idUser)\n            .then(\n                response => {\n                    this.setState({ message: `Delete of user ${idUser} Successful` })\n                    this.refreshUsers()\n                }\n            )\n\n    }\n\n    addUserClicked(idUser) {\n        CourseDataService.addUser(this.props.match.params.id, idUser).then(\n            response => {\n                this.setState({message: `User ${idUser} has been successfully added`})\n                this.refreshUsers()\n            }\n        )\n    }\n\n\n    render() {\n        //console.log('render')\n\n        return (\n            \n            <div className=\"container\">\n                <h3>Users of Activity {this.props.match.params.id} </h3>\n                {this.state.message && <div className=\"alert alert-success\">{this.state.message}</div>}\n                <div className=\"container\">\n                    <table className=\"table\">\n                        <thead>\n                            <tr>\n                                <th>Id</th>\n                                <th>Nome</th>\n                                <th>Add</th>\n                                <th>Delete</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                this.state.users.map(\n                                    user =>\n                                        <tr key={user.id}>\n                                            <td>{user.id}</td>\n                                            <td>{user.nome}</td>\n                                            <td></td>\n                                            <td><button className=\"btn btn-warning\" onClick={() => this.deleteUserClicked(user.id)}>Delete</button></td>\n                                        </tr>\n                                )\n                            }\n                                                        {\n                                this.state.usersNotOnCourse.map(\n                                    user =>\n                                        <tr key={user.id}>\n                                            <td>{user.id}</td>\n                                            <td>{user.nome}</td>\n                                            <td><button className=\"btn btn-success\" onClick={() => this.addUserClicked(user.id)}>Add</button></td>\n                                            <td></td>\n                                        </tr>\n                                )\n                            }\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        )\n    }\n}\n\n\nexport default AddUserComponent","import axios from 'axios'\n\nconst API_URL = 'http://localhost:8080'\n\nexport const USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser'\n\nclass AuthenticationService {\n\n    executeBasicAuthenticationService(username, password) {\n        return axios.get(`${API_URL}/basicauth`,\n            { headers: { authorization: this.createBasicAuthToken(username, password) } })\n    }\n\n    executeJwtAuthenticationService(username, password) {\n        //console.log(username);\n        return axios.post(`${API_URL}/authenticate`, {\n            username,\n            password\n        })\n    }\n\n    createBasicAuthToken(username, password) {\n        return 'Basic ' + window.btoa(username + \":\" + password)\n    }\n\n    registerSuccessfulLogin(username, password) {\n        //let basicAuthHeader = 'Basic ' +  window.btoa(username + \":\" + password)\n        //console.log('registerSuccessfulLogin')\n        sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username)\n        this.setupAxiosInterceptors(this.createBasicAuthToken(username, password))\n    }\n\n    registerSuccessfulLoginForJwt(username, token) {\n        sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username)\n        this.setupAxiosInterceptors(this.createJWTToken(token))\n    }\n\n    createJWTToken(token) {\n        return 'Bearer ' + token\n    }\n\n\n    logout() {\n        sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    }\n\n    isUserLoggedIn() {\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\n        if (user === null) return false\n        return true\n    }\n\n    getLoggedInUserName() {\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\n        if (user === null) return ''\n        return user\n    }\n\n    setupAxiosInterceptors(token) {\n        axios.interceptors.request.use(\n            (config) => {\n                if (this.isUserLoggedIn()) {\n                    config.headers.authorization = token\n                }\n                return config\n            }\n        )\n    }\n}\n\nexport default new AuthenticationService()","import React, { Component } from 'react'\nimport AuthenticationService from '../service/AuthenticationService';\n\nclass LoginComponent extends Component {\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            username: '',\n            password: '',\n            hasLoginFailed: false,\n            showSuccessMessage: false\n        }\n\n        this.handleChange = this.handleChange.bind(this)\n        this.loginClicked = this.loginClicked.bind(this)\n    }\n\n    handleChange(event) {\n        this.setState(\n            {\n                [event.target.name]\n                    : event.target.value\n            }\n        )\n    }\n\n    loginClicked() {\n        //in28minutes,dummy\n        // if(this.state.username==='in28minutes' && this.state.password==='dummy'){\n        //     AuthenticationService.registerSuccessfulLogin(this.state.username,this.state.password)\n        //     this.props.history.push(`/courses`)\n        //     //this.setState({showSuccessMessage:true})\n        //     //this.setState({hasLoginFailed:false})\n        // }\n        // else {\n        //     this.setState({showSuccessMessage:false})\n        //     this.setState({hasLoginFailed:true})\n        // }\n\n        /*AuthenticationService\n            .executeBasicAuthenticationService(this.state.username, this.state.password)\n            .then(() => {\n                AuthenticationService.registerSuccessfulLogin(this.state.username, this.state.password)\n                this.props.history.push(`/courses`)\n            }).catch(() => {\n                this.setState({ showSuccessMessage: false })\n                this.setState({ hasLoginFailed: true })\n            })\n        */\n         AuthenticationService\n             .executeJwtAuthenticationService(this.state.username, this.state.password)\n             .then((response) => {\n                 AuthenticationService.registerSuccessfulLoginForJwt(this.state.username, response.data.token)\n                 this.props.history.push(`/courses`)\n             }).catch(() => {\n                 this.setState({ showSuccessMessage: false })\n                 this.setState({ hasLoginFailed: true })\n             })\n\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>Login</h1>\n                <div className=\"container\">\n                    {/*<ShowInvalidCredentials hasLoginFailed={this.state.hasLoginFailed}/>*/}\n                    {this.state.hasLoginFailed && <div className=\"alert alert-warning\">Invalid Credentials</div>}\n                    {this.state.showSuccessMessage && <div>Login Sucessful</div>}\n                    {/*<ShowLoginSuccessMessage showSuccessMessage={this.state.showSuccessMessage}/>*/}\n                    User Name: <input type=\"text\" name=\"username\" value={this.state.username} onChange={this.handleChange} />\n                    Password: <input type=\"password\" name=\"password\" value={this.state.password} onChange={this.handleChange} />\n                    <button className=\"btn btn-success\" onClick={this.loginClicked}>Login</button>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default LoginComponent","import React, { Component } from 'react'\n\nclass LogoutComponent extends Component {\n    render() {\n        return (\n            <>\n                <h1>You are logged out</h1>\n                <div className=\"container\">\n                    Thank You for Using Our Application.\n                </div>\n            </>\n        )\n    }\n}\n\nexport default LogoutComponent","import React, { Component } from 'react'\nimport { Link, withRouter } from 'react-router-dom'\nimport AuthenticationService from '../service/AuthenticationService';\n\nclass MenuComponent extends Component {\n\n    render() {\n        const isUserLoggedIn = AuthenticationService.isUserLoggedIn();\n\n        return (\n            <header>\n                <nav className=\"navbar navbar-expand-md navbar-dark bg-primary\">\n                    <ul className=\"navbar-nav\" style={{color: \"white\"}}>\n                        <li><Link className=\"nav-link\" style={{color: \"white\"}} to=\"/courses\">Activities/Courses</Link></li>\n                        <li><Link className=\"nav-link\" style={{color: \"white\"}} to=\"/users\">Users</Link></li>\n                    </ul>\n                    <ul className=\"navbar-nav navbar-collapse justify-content-end\">\n                        {!isUserLoggedIn && <li><Link className=\"nav-link\" style={{color: \"white\"}} to=\"/login\">Login</Link></li>}\n                        {isUserLoggedIn && <li><Link className=\"nav-link\" style={{color: \"white\"}} to=\"/logout\" onClick={AuthenticationService.logout}>Logout</Link></li>}\n                    </ul>\n                </nav>\n            </header>\n        )\n    }\n}\n\nexport default withRouter(MenuComponent)","import React, { Component } from 'react'\nimport { Route, Redirect } from 'react-router-dom'\nimport AuthenticationService from '../service/AuthenticationService';\n\nclass AuthenticatedRoute extends Component {\n    render() {\n        if (AuthenticationService.isUserLoggedIn()) {\n            return <Route {...this.props} />\n        } else {\n            return <Redirect to=\"/login\" />\n        }\n\n    }\n}\n\nexport default AuthenticatedRoute","import React, { Component } from 'react';\nimport ListCoursesComponent from './ListCoursesComponent';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport CourseComponent from './CourseComponent';\nimport UserComponent from './UserComponent';\nimport ListUsersComponent from './ListUsersComponent';\nimport AddUserComponent from './AddUserComponent';\nimport LoginComponent from './LoginComponent';\nimport LogoutComponent from './LogoutComponent';\nimport MenuComponent from './MenuComponent';\nimport AuthenticatedRoute from './AuthenticatedRoute';\nclass InstructorApp extends Component {\n    render() {\n        return (\n            <Router>\n                <>\n                <MenuComponent style={{width:\"100%\"}}/>\n                <div className=\"col s12 m6\" style={{margin: \"auto\", width: \"50%\", padding: \"10px\"}}>\n                    <div className=\"card horizontal\">\n                        <div className=\"card-content black-text\">\n                    <h1>Users/Activities Application</h1>\n                    <Switch>\n                        <Route path=\"/\" exact component={LoginComponent} />\n                        <Route path=\"/login\" exact component={LoginComponent} />\n                        <AuthenticatedRoute path=\"/logout\" exact component={LogoutComponent} />\n                        <AuthenticatedRoute path=\"/courses\" exact component={ListCoursesComponent} />\n                        <AuthenticatedRoute path=\"/courses/:id/addUser/:idUser\" exact component={AddUserComponent} />\n                        <AuthenticatedRoute path=\"/courses/:id/addUser\" exact component={AddUserComponent} />\n                        <AuthenticatedRoute path=\"/users\" exact component={ListUsersComponent} />\n                        <AuthenticatedRoute path=\"/user\" exact component={UserComponent} />\n                        <AuthenticatedRoute path=\"/users/:id\" exact component={UserComponent} />\n                        <AuthenticatedRoute path=\"/courses\" exact component={ListCoursesComponent} />\n                        <AuthenticatedRoute path=\"/courses/:id\" component={CourseComponent} />\n                    </Switch>\n                    </div>\n                    </div>\n                    </div>\n                </>\n            </Router>\n        )\n    }\n}\n\nexport default InstructorApp","import React, { Component } from 'react';\nimport './App.css';\nimport InstructorApp from './component/InstructorApp';\n\nclass App extends Component {\n  render() {\n    return (\n        <div className=\"container\" style={{padding:\"0px\", maxWidth:\"100%\"}}>\n          <InstructorApp />\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './materialize.min.css';\n//import '../public/css/materialize.min.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}